[["index.html", "aplot: simplifying the creation of complex graph to visualize associations across diverse data types Preface", " aplot: simplifying the creation of complex graph to visualize associations across diverse data types Guangchuang Yu Department of Bioinformatics, School of Basic Medical Sciences, Southern Medical University guangchuangyu@gmail.com 2025-02-20 Preface For many times, we are not just aligning plots as what cowplot and patchwork did. We would like to align associated information that requires axes to be exactly matched in subplots. "],["axis_align.html", "1 Reconcile axis limits", " 1 Reconcile axis limits Suppose we have the following plots and would like to combine them in a single page. library(dplyr) library(ggplot2) library(ggtree) library(patchwork) library(aplot) no_legend=theme(legend.position=&#39;none&#39;) d &lt;- group_by(mtcars, cyl) %&gt;% summarize(mean=mean(disp), sd=sd(disp)) d2 &lt;- dplyr::filter(mtcars, cyl != 8) %&gt;% rename(var = cyl) p1 &lt;- ggplot(d, aes(x=cyl, y=mean)) + geom_col(aes(fill=factor(cyl)), width=1) + no_legend p2 &lt;- ggplot(d2, aes(var, disp)) + geom_jitter(aes(color=factor(var)), width=.5) + no_legend p3 &lt;- ggplot(filter(d, cyl != 4), aes(cyl, mean)) + geom_col(aes(fill=factor(cyl)), width=.6) + no_legend pp &lt;- list(p1, p2, p3) We can use cowplot or patchwork to combine plots. plot_list(gglist = pp, ncol=1) However, these plots do not align properly (Figure 1.1A). There are two reasons: the plotted data have different limits the different plots have different amounts of expansion spaces To address these two issues, ggtree provides xlim2() and ylim2() functions to set x or y limits1. It use input limits to set axis limits that is similar to xlim() and ylim() (Figure 1.1B). If limits = NULL (by default), the xlim2() and ylim2() functions will calculate axis limits from input ggplot object. So that we can easily set limits of a ggplot object based on another ggplot object to uniformize their limits (Figure 1.1C). pp2 &lt;- lapply(pp, function(p) p + xlim2(limits=c(3, 11))) pp3 &lt;- lapply(pp, function(p) p + xlim2(p1)) plot_list(gglist = pp2, ncol=1) plot_list(gglist = pp3, ncol=1) If the plot was flipped, it will throw a message and apply the another axis. In this example, the x limit of p1 is applied to y limit of p3 as p3 was flipped. Figure 1.1: Setting x-axis limits for aligning plots. Composite plot that does not align properly (A column), align based on user specific limits (B column), and align based on xlim of the p1 object (C column). Similarly, we can use ylim2() to reconcile y axis. As we can see in Figure 1.2, only panel A and C were aligned properly. p &lt;- ggplot(mtcars, aes(disp, cyl, group=cyl)) + geom_boxplot() p1 &lt;- ggplot(subset(mtcars, cyl!=8), aes(disp, cyl, group=cyl)) + geom_point() p2 &lt;- p1 + ylim2(p) p + p1 + p2 + plot_annotation(tag_levels=&quot;A&quot;) Figure 1.2: Setting y-axis limits for aligning plots. Composite plot that does not align properly (A vs B), and align based on ylim of the p object (A vs C). the implementation was inspired by https://thackl.github.io/ggtree-composite-plots↩︎ "],["align-associated-subplots.html", "2 Align associated subplots 2.1 A first glance 2.2 Aligning plots with a tree 2.3 Creating annotated heatmap 2.4 A single cell example", " 2 Align associated subplots With xlim2() and ylim2(), it is easy to align associated subplots to annotate a main figure. The aplot package provides insert_left(), insert_right(), insert_top() and insert_bottom() as shortcut to help users aligning subplots. 2.1 A first glance library(ggplot2) library(aplot) p &lt;- ggplot(mtcars, aes(mpg, disp)) + geom_point() p2 &lt;- ggplot(mtcars, aes(mpg)) + geom_density(fill=&#39;steelblue&#39;, alpha=.5) + ggtree::theme_dendrogram() p3 &lt;- ggplot(mtcars, aes(x=1, y=disp)) + geom_boxplot(fill=&#39;firebrick&#39;, alpha=.5) + theme_void() ap &lt;- p %&gt;% insert_top(p2, height=.3) %&gt;% insert_right(p3, width=.1) ## you can use `ggsave(filename=&quot;aplot.png&quot;, plot=ap)` to export the plot to image file print(ap) # or just type ap will print the figure 2.2 Aligning plots with a tree Aligning a plot with a tree is difficult, as it requres expertise to extract the order of taxa on the tree. library(ggtree) set.seed(2020-03-27) x &lt;- rtree(10) d &lt;- data.frame(taxa=x$tip.label, value = abs(rnorm(10))) p &lt;- ggtree(x) + geom_tiplab(align = TRUE) + xlim(NA, 3) p2 &lt;- ggplot(d, aes(value, taxa)) + geom_col() + scale_x_continuous(expand=c(0,0)) library(patchwork) p | p2 Althought patchwork did a good job at aligning y-axes among the two plots, the output is not what we want if the bar heights are associated with external nodes on the tree. It is not so obvious for an ordinary user to extract the order of tip label from the tree to re-draw the barplot. If we insert a ggtree object in aplot, it will transform other plots in the same row (insert_left and insert_right) or same column (insert_top and insert_bottom) based on the tree structure. p2 %&gt;% insert_left(p) Example from https://github.com/YuLab-SMU/ggtree/issues/339. require(ggtree) require(ggplot2) require(dplyr) require(gggenes) tree &lt;- read.tree(&quot;data/nbh.nwk&quot;) nbh &lt;- read.csv(&quot;data/nbh.csv&quot;) tree_plot &lt;- ggtree(tree) + geom_tiplab(aes(label=label)) nbh_plot &lt;- ggplot( (nbh %&gt;% select(label, block_id,pid,start,end,strand) %&gt;% distinct()), aes(xmin = start, xmax = end, y = block_id, forward = strand) # as_factor(block_id) ) + geom_gene_arrow() + #scale_fill_brewer(palette = &quot;Set3&quot;) + theme_genes() %+replace% theme(panel.grid.major.y = element_line(colour = NULL)) + # , linetype = &quot;dotted&quot;)) + #theme_classic() + theme( axis.title.x=element_blank(), #axis.text.x=element_blank(), axis.ticks.x=element_blank(), #axis.line.x = element_blank(), axis.title.y=element_blank(), #axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line.y = element_blank() ) require(aplot) insert_left(nbh_plot, tree_plot) Example from https://github.com/YuLab-SMU/ggtree/issues/313. set.seed(20200618) ## Create a random tree tre &lt;- rtree(10) tre$tip.label &lt;- letters[1:10] ## Build matrix with some random numbers in long format so can be plotted as &quot;heatmap&quot; using geom_tile gmat &lt;- expand.grid(x = letters[1:10], y = letters[1:10]) gmat$v &lt;- rexp(100, rate=.1) ## Generate some reandom numbres for a line plot gline &lt;- tibble(x = letters[1:10], y = rnorm(10, 10, 2)) ## Generate some random percentages for a bar plot gbar &lt;- tibble(x = letters[1:10], y = round(runif(10) * 100,1)) ## Construct ggtree ptre &lt;- ggtree(tre) + geom_tiplab() + geom_nodepoint(colour = &#39;firebrick&#39;, size=3) ## Constuct companion plots pmat &lt;- ggplot(gmat, aes(x,y, fill=v)) + geom_tile() pbar &lt;- ggplot(gbar, aes(x,y)) + geom_col() + coord_flip() + ylab(NULL) pline &lt;- ggplot(gline, aes(x,y)) + geom_line(aes(group = 1)) + geom_point() + coord_flip() cowplot::plot_grid(ptre, pmat, pbar, pline, ncol=4) library(aplot) pmat %&gt;% insert_left(ptre) %&gt;% insert_right(pbar) %&gt;% insert_right(pline) 2.3 Creating annotated heatmap The xlim2() and ylim2() functions create many possibilities to align figures. For instance, we can add column and row annotations around a heatmap in all sides (top, bottom, left and right). They can be aligned properly with the aids of xlim2() and ylim2() even with missing values presented as demonstrated in Figure 2.1. library(tidyr) library(ggplot2) library(ggtree) set.seed(2019-11-07) d &lt;- matrix(rnorm(25), ncol=5) rownames(d) &lt;- paste0(&#39;g&#39;, 1:5) colnames(d) &lt;- paste0(&#39;t&#39;, 1:5) hc &lt;- hclust(dist(d)) hcc &lt;- hclust(dist(t(d))) phr &lt;- ggtree(hc) phc &lt;- ggtree(hcc) + layout_dendrogram() d &lt;- data.frame(d) d$gene &lt;- rownames(d) dd &lt;- gather(d, 1:5, key=&quot;condition&quot;, value=&#39;expr&#39;) p &lt;- ggplot(dd, aes(condition,gene, fill=expr)) + geom_tile() + scale_fill_viridis_c() + scale_y_discrete(position=&quot;right&quot;) + theme_minimal() + xlab(NULL) + ylab(NULL) g &lt;- ggplot(dplyr::filter(dd, gene != &#39;g2&#39;), aes(gene, expr, fill=gene)) + geom_boxplot() + coord_flip() + scale_fill_brewer(palette = &#39;Set1&#39;) + theme_minimal() + theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(), panel.grid.minor = element_blank(), panel.grid.major.y = element_blank()) + xlab(NULL) + ylab(NULL) ca &lt;- data.frame(condition = paste0(&#39;t&#39;, 1:5), A1 = rep(LETTERS[1:2], times=c(3, 2)), A2 = rep(letters[3:5], times=c(1, 3, 1)) ) cad &lt;- gather(ca, A1, A2, key=&#39;anno&#39;, value=&#39;type&#39;) pc &lt;- ggplot(cad, aes(condition, y=anno, fill=type)) + geom_tile() + scale_y_discrete(position=&quot;right&quot;) + theme_minimal() + theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) + xlab(NULL) + ylab(NULL) set.seed(123) dp &lt;- data.frame(gene=factor(rep(paste0(&#39;g&#39;, 1:5), 2)), pathway = sample(paste0(&#39;pathway&#39;, 1:5), 10, replace = TRUE)) pp &lt;- ggplot(dp, aes(pathway, gene)) + geom_point(size=5, color=&#39;steelblue&#39;) + theme_minimal() + theme(axis.text.x=element_text(angle=90, hjust=0), axis.text.y = element_blank(), axis.ticks.y = element_blank()) + xlab(NULL) + ylab(NULL) p %&gt;% insert_left(phr, width=.3) %&gt;% insert_right(pp, width=.4) %&gt;% insert_right(g, width=.4) %&gt;% insert_top(pc, height=.1) %&gt;% insert_top(phc, height=.2) Figure 2.1: Create complex heatmap. With the helps of xlim2() and ylim2(), it is easy to align row or column annotations around a figure (e.g. a heatmap). 2.4 A single cell example Example taken from https://davemcg.github.io/post/lets-plot-scrna-dotplots/ library(readr) library(tidyr) library(dplyr) library(ggplot2) library(ggtree) file &lt;- system.file(&quot;extdata&quot;, &quot;scRNA_dotplot_data.tsv.gz&quot;, package=&quot;aplot&quot;) gene_cluster &lt;- readr::read_tsv(file) dot_plot &lt;- gene_cluster %&gt;% mutate(`% Expressing` = (cell_exp_ct/cell_ct) * 100) %&gt;% filter(count &gt; 0, `% Expressing` &gt; 1) %&gt;% ggplot(aes(x=cluster, y = Gene, color = count, size = `% Expressing`)) + geom_point() + cowplot::theme_cowplot() + theme(axis.line = element_blank()) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + ylab(NULL) + theme(axis.ticks = element_blank()) + scale_color_gradientn(colours = viridis::viridis(20), limits = c(0,4), oob = scales::squish, name = &#39;log2 (count + 1)&#39;) + scale_y_discrete(position = &quot;right&quot;) mat &lt;- gene_cluster %&gt;% select(-cell_ct, -cell_exp_ct, -Group) %&gt;% # drop unused columns to faciliate widening pivot_wider(names_from = cluster, values_from = count) %&gt;% data.frame() # make df as tibbles -&gt; matrix annoying row.names(mat) &lt;- mat$Gene # put gene in `row` mat &lt;- mat[,-1] #drop gene column as now in rows clust &lt;- hclust(dist(mat %&gt;% as.matrix())) # hclust with distance matrix ggtree_plot &lt;- ggtree::ggtree(clust) v_clust &lt;- hclust(dist(mat %&gt;% as.matrix() %&gt;% t())) ggtree_plot_col &lt;- ggtree(v_clust) + layout_dendrogram() labels= ggplot(gene_cluster, aes(cluster, y=1, fill=Group)) + geom_tile() + scale_fill_brewer(palette = &#39;Set1&#39;,name=&quot;Cell Type&quot;) + theme_void() library(patchwork) ggtree_plot | dot_plot | (ggtree_plot_col / labels) library(aplot) ## the rows of the dot_plot was automatically reorder based on the tree dot_plot %&gt;% insert_left(ggtree_plot, width=.2) ## the columns of the dot_plot was automatically reorder based on the tree dot_plot %&gt;% insert_left(ggtree_plot, width=.2) %&gt;% insert_top(labels, height=.02) %&gt;% insert_top(ggtree_plot_col, height=.1) "],["cases.html", "3 Cases 3.1 PBMC example 3.2 Oncoplot example 3.3 funky heatmap 3.4 Genomics track example", " 3 Cases 3.1 PBMC example 3.1.1 Marker gene heatmap library(yulab.utils) pload(dplyr) pload(ggplot2) pload(ggfun) pload(ggtree) pload(aplot) pload(Seurat) # celltype &lt;- c(&quot;Naive CD4 T&quot;, &quot;B&quot;, &quot;NK&quot;) # id &lt;- pbmc@active.ident # md = data.frame(cell=names(id), group=id) # md &lt;- md[md$group %in% celltype, ] # md$group &lt;- as.character(md$group) # md &lt;- lapply(split(md, md$group), function(x) x[1:30,]) |&gt; rbindlist() # # pbmc &lt;- pbmc[, md$cell] pbmc &lt;- qs::qread(&quot;data/pbmc-subset.qs&quot;) m &lt;- FindAllMarkers(pbmc, only.pos=TRUE) top10 &lt;- m %&gt;% group_by(cluster) %&gt;% dplyr::filter(avg_log2FC &gt; 2) %&gt;% slice_head(n = 10) pbmc &lt;- ScaleData(pbmc, features = rownames(pbmc)) x &lt;- pbmc[[&#39;RNA&#39;]]$scale.data[top10$gene,] y &lt;- mat2df(x) -&gt; y y$gene &lt;- rownames(x)[y$row] y$cell &lt;- colnames(x)[y$col] p &lt;- ggplot(y, aes(cell, gene, fill = value)) + geom_tile()+ scale_fill_viridis_c(name = &quot;Gene Expression&quot;) + theme_noxaxis() + scale_y_discrete(position = &quot;right&quot;) + xlab(NULL) + ylab(NULL) gene_cls &lt;- hclust(dist((x))) cell_cls &lt;- hclust(dist(t((x)))) gene_tree &lt;- ggtree(gene_cls, branch.length = &#39;none&#39;) cell_tree = ggtree(cell_cls, branch.length = &#39;none&#39;) + layout_dendrogram() id &lt;- pbmc@active.ident md = data.frame(cell=names(id), group=id) p_cell_type &lt;- ggplot(md, aes(cell, y=1, fill = group)) + geom_tile() + scale_fill_brewer(palette=&quot;Set1&quot;, name = &#39;Cell Type&#39;) + theme_nothing() g &lt;- p |&gt; insert_left(gene_tree, width = .2) |&gt; insert_top(p_cell_type, height = .02) |&gt; insert_top(cell_tree, height = .1) g 3.1.2 Degree of genes in the PPI network pload(igraph) pload(clusterProfiler) ppi &lt;- getPPI(top10$gene, output=&#39;igraph&#39;, taxID=&#39;9606&#39;) deg &lt;- stack(degree(ppi, v = V(ppi))) |&gt; setNames(c(&quot;degree&quot;, &quot;gene&quot;)) p_ppi &lt;- ggplot(deg, aes(1, gene, fill=degree, size=degree)) + geom_point(shape=21) + scale_fill_gradientn(colors = hcl.colors(20, &quot;RdYlGn&quot;)) + theme_nothing() 3.1.3 Genes in pathways pload(tidytree) pload(msigdbr) node &lt;- c(35, 34, 32) genes &lt;- lapply(node, function(n) offspring(gene_tree, n, tiponly=T)$label) |&gt; setNames(c(&quot;CD4&quot;, &quot;NK&quot;, &quot;B&quot;)) pload(clusterProfiler) gene_set &lt;- msigdbr(species=&quot;human&quot;, category=&quot;C2&quot;) names(gene_set) ## [1] &quot;gs_cat&quot; &quot;gs_subcat&quot; ## [3] &quot;gs_name&quot; &quot;gene_symbol&quot; ## [5] &quot;entrez_gene&quot; &quot;ensembl_gene&quot; ## [7] &quot;human_gene_symbol&quot; &quot;human_entrez_gene&quot; ## [9] &quot;human_ensembl_gene&quot; &quot;gs_id&quot; ## [11] &quot;gs_pmid&quot; &quot;gs_geoid&quot; ## [13] &quot;gs_exact_source&quot; &quot;gs_url&quot; ## [15] &quot;gs_description&quot; cc &lt;- compareCluster(genes, enricher, TERM2GENE=gene_set[, c(&quot;gs_name&quot;, &quot;gene_symbol&quot;)]) res &lt;- cc@compareClusterResult |&gt; group_by(Cluster) |&gt; slice_head(n = 5) |&gt; as.data.frame() gene2path &lt;- lapply(res$geneID, function(x) unlist(strsplit(x, split=&quot;/&quot;))) |&gt; setNames(res$Description) |&gt; stack() |&gt; setNames(c(&quot;gene&quot;, &quot;pathway&quot;)) pcp &lt;- ggplot(gene2path, aes(pathway, gene)) + geom_point(size=5, shape=21, fill = &quot;steelblue&quot;) + theme_minimal() + theme_noyaxis() + theme(axis.text.x = element_text(angle=30, hjust=1)) + xlab(NULL) + ylab(NULL) gg &lt;- g |&gt; insert_right(p_ppi, width=.05) |&gt; insert_right(pcp, width=.5) gg 3.1.4 All in one pp &lt;- plot_list(cell_tree, p_cell_type, heights=c(1, .5)) pp &lt;- plot_list(gene_tree, pp, widths=c(.3, 1)) pp &lt;- plot_list(p, pp, p_ppi, pcp, widths=c(1, .8, .05, .6)) pp &lt;- pp + patchwork::plot_annotation(tag_levels=&#39;a&#39;) final_plot &lt;- plot_list(pp, gg, ncol=1, tag_levels=&#39;A&#39;, heights=c(1, 1.2)) final_plot 3.2 Oncoplot example pload(aplotExtra) pload(RTCGA.mRNA) pload(RTCGA) laml.maf &lt;- system.file(&quot;extdata&quot;, &quot;tcga_laml.maf.gz&quot;, package = &quot;maftools&quot;) laml.clin &lt;- system.file(&#39;extdata&#39;, &#39;tcga_laml_annot.tsv&#39;, package = &#39;maftools&#39;) laml &lt;- maftools::read.maf(maf = laml.maf, clinicalData = laml.clin) ## -Reading ## -Validating ## -Silent variants: 475 ## -Summarizing ## -Processing clinical data ## -Finished in 0.260s elapsed (0.000s cpu) onco &lt;- oncoplot(maf = laml, genes = 20) plot_tcga_expr &lt;- function(mRNA, genes, name = &quot;Gene Expression&quot;) { d = expressionsTCGA(mRNA, extract.cols = genes) dd = gather(d, gene, expression, -c(1,2)) ggplot(dd, aes(expression, gene, fill=stat(x))) + ggridges::geom_density_ridges_gradient() + scale_fill_viridis_c(option=&quot;C&quot;, name = name) + theme_minimal() + theme_noyaxis() + xlab(NULL) + ylab(NULL) + theme(legend.position=&#39;bottom&#39;) } onco_genes &lt;- aplotExtra:::get_oncoplot_genes(laml) brca &lt;- plot_tcga_expr(BRCA.mRNA, onco_genes, &quot;Gene Expression in TCGA\\nbreast cancer patients&quot;) ov &lt;- plot_tcga_expr(OV.mRNA, onco_genes, &quot;Gene Expression in TCGA\\novarian cancer patients&quot;) op &lt;- insert_right(onco, brca, width = .6) |&gt; insert_right(ov, width=.6) op 3.3 funky heatmap library(aplotExtra) library(tidyverse) data(&quot;mtcars&quot;) d &lt;- yulab.utils::scale_range(mtcars) |&gt; rownames_to_column(&quot;id&quot;) |&gt; arrange(desc(mpg)) g1 &lt;- funky_text(d) g2 &lt;- funky_bar(d, 2) + scale_fill_gradient(low = &quot;#CC4C02&quot;, high = &quot;#FFFFE5&quot;) g3 &lt;- funky_bar(d, 3) + scale_fill_gradient(low = &quot;steelblue&quot;, high = &quot;firebrick&quot;) g4 &lt;- funky_point(d, 4:7) + scale_fill_gradient(low = &quot;#CC4C02&quot;, high = &quot;#FFFFE5&quot;) g5 &lt;- funky_point(d, 8:12) + scale_fill_gradient(low = &quot;#08519C&quot;, high = &quot;#F7FBFF&quot;) #funky_heatmap(data=mtcars) fp &lt;- funky_heatmap(g1, g2, g4, g5, options=theme_stamp()) fp 3.4 Genomics track example 3.4.1 Setup packages and parameteres pload(ChIPseeker) pload(TxDb.Hsapiens.UCSC.hg19.knownGene) pload(org.Hs.eg.db) pload(IRanges) pload(GenomicFeatures) pload(gggenes) pload(HiContacts) pload(cowplot) # This analysis uses processed genomic data from: # 1. Hi-C data: GM12878 (GSM1551550) and K562 (GSM1551618) # 2. ChIP-seq data for histone modifications: # - H3K27ac (GM12878: GSM733771, K562: GSM733656) # - H3K4me1 (GM12878: GSM733772, K562: GSM733692) # - H3K4me3 (GM12878: GSM733708, K562: GSM733680) # - H3K36me3 (GM12878: GSM733679, K562: GSM733714) # Controls: GM12878 (GSM733742), K562 (GSM733780) # Analysis parameters: # - MACS2 peak calling: default parameters except: # * genome size: -g 2.7e9 (human) # - MACS2 bdgdiff: default parameters except: # * d1: 6284864 (GM12878 sequencing depth) and d2: 18559220 (K562 sequencing depth) # Load processed genomic data epigenetics_data &lt;- qs::qread(&quot;./data/epigenetics_data.qs&quot;) # Global parameters and themes plot_params &lt;- list( scale = &quot;log10&quot;, limits = c(0, 1.7), chr = &quot;chr6&quot;, x_min = 43600000, x_max = 44100000, highlight_regions = list( region1 = c(43738000, 43754500), region2 = c(43900000, 44000000), region3 = c(44060000, 44100000) ), peak_color = c(&quot;peak_in_K562&quot; = &quot;#E05B5B&quot;, &quot;peak_in_GM12878&quot; = &quot;#519CBA&quot;) ) common_theme &lt;- theme_minimal() + theme( axis.title.x = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = &quot;black&quot;), panel.border = element_blank(), plot.title = element_text(hjust = 0.5) ) txdb &lt;- TxDb.Hsapiens.UCSC.hg19.knownGene # Function to add highlight rectangles addHighlights &lt;- function(p, ymax, alpha=0.2) { p + annotate(&quot;rect&quot;, xmin=plot_params$highlight_regions$region1[1], xmax=plot_params$highlight_regions$region1[2], ymin=0, ymax=ymax, fill=&quot;#c6c3c3&quot;, alpha=alpha) + annotate(&quot;rect&quot;, xmin=plot_params$highlight_regions$region2[1], xmax=plot_params$highlight_regions$region2[2], ymin=0, ymax=ymax, fill=&quot;#c6c3c3&quot;, alpha=alpha) + annotate(&quot;rect&quot;, xmin=plot_params$highlight_regions$region3[1], xmax=plot_params$highlight_regions$region3[2], ymin=0, ymax=ymax, fill=&quot;#c6c3c3&quot;, alpha=alpha) } # Generate gene plot generateGenePlot &lt;- function(txdb, chr, x_min, x_max, OrgDb, show_legend = FALSE) { # Get genes in the region win &lt;- GRanges(seqnames = chr, ranges = IRanges::IRanges(start = x_min, end = x_max)) all_genes &lt;- GenomicFeatures::genes(txdb) gene_df &lt;- data.frame(subsetByOverlaps(x = all_genes, ranges = win, type = &quot;any&quot;)) gene_df$gene_id &lt;- factor(gene_df$gene_id, levels = unique(gene_df$gene_id)) # Process gene data gene_df &lt;- gene_df[,c(&quot;seqnames&quot;, &quot;gene_id&quot;, &quot;start&quot;, &quot;end&quot;, &quot;strand&quot;)] colnames(gene_df)[1] &lt;- &quot;chromosome&quot; gene_df$forward &lt;- ifelse(gene_df$strand==&quot;+&quot;, TRUE, FALSE) # Convert gene IDs changeid &lt;- bitr(geneID = gene_df$gene_id, fromType = &quot;ENTREZID&quot;, toType = &quot;SYMBOL&quot;, OrgDb = OrgDb) colnames(changeid)[1] &lt;- c(&quot;gene_id&quot;) gene_df &lt;- merge(gene_df, changeid, all.x = TRUE) gene_df &lt;- gene_df[, c(2:ncol(gene_df))] colnames(gene_df)[ncol(gene_df)] &lt;- &quot;gene_symbol&quot; gene_df$start &lt;- pmax(gene_df$start, x_min) gene_df$end &lt;- pmin(gene_df$end, x_max) p &lt;- ggplot(gene_df, aes(xmin = start, xmax = end, y = gene_symbol, forward=forward, fill = gene_symbol)) + geom_gene_arrow() + xlim(c(x_min, x_max)) + theme_genes() + scale_fill_brewer(palette = &quot;Set3&quot;) + labs(fill = &quot;gene symbol&quot;) + common_theme if (!show_legend) { p &lt;- p + theme(legend.position = &quot;none&quot;) } return(p) } # Generate HiC plot generateHicPlot &lt;- function(data, label, use_scores = NULL, show_legend = TRUE) { if (is.null(use_scores)) { p &lt;- HiContacts::plotMatrix(data, maxDistance = plot_params$x_max - plot_params$x_min, caption = FALSE, scale = plot_params$scale, limits = plot_params$limits) + xlim(plot_params$x_min, plot_params$x_max) + labs(fill = &#39;hic score&#39;) + ylab(paste0(label, &quot; hic&quot;)) + common_theme } else { p &lt;- HiContacts::plotMatrix(data, maxDistance = plot_params$x_max - plot_params$x_min, use.scores = use_scores, caption = FALSE, cmap = HiContacts::bbrColors()) + xlim(plot_params$x_min, plot_params$x_max) + labs(fill = &#39;log2fc&#39;) + ylab(paste0(label, &quot; &quot;)) + common_theme } if (!show_legend) { p &lt;- p + theme(legend.position = &quot;none&quot;) } return(p) } # Generate coverage plot generateCoveragePlot &lt;- function(data, label, ymax, colors = NULL, add_facet = FALSE, show_legend = TRUE) { p &lt;- covplot(data, weightCol = &quot;V5&quot;, chrs = plot_params$chr, xlim = c(plot_params$x_min, plot_params$x_max), ylab = label, title = &quot;&quot;) + ylim(c(0, ymax)) + common_theme if (!is.null(colors)) { p &lt;- p + scale_color_manual(values = colors) + scale_fill_manual(values = colors) } else { p &lt;- p + scale_fill_brewer(palette = &quot;Set2&quot;) + scale_color_brewer(palette = &quot;Set2&quot;) } if (add_facet) { p &lt;- p + facet_grid(.id ~ .) + theme(strip.text.y = element_blank()) } if (!show_legend) { p &lt;- p + theme(legend.position = &quot;none&quot;) } return(p) } 3.4.2 Visualization of comparative genomics data tracks # Generate HiC comparision plot combine_hic_p &lt;- generateHicPlot(epigenetics_data[[&quot;div_hic&quot;]], &quot;K562/GM12878 hic compare&quot;, use_scores = &quot;balanced.fc&quot;) # Generate histone modification comparision plots histone_plots &lt;- list( H3K27ac = list(data = epigenetics_data[[&quot;H3K27ac_peak&quot;]], ymax = 100), H3K36me3 = list(data = epigenetics_data[[&quot;H3K36me3_peak&quot;]], ymax = 10), H3K4me1 = list(data = epigenetics_data[[&quot;H3K4me1_peak&quot;]], ymax = 30), H3K4me3 = list(data = epigenetics_data[[&quot;H3K4me3_peak&quot;]], ymax = 25) ) %&gt;% map2(names(.), function(x, name) { p &lt;- generateCoveragePlot(x$data, name, x$ymax, plot_params$peak_color, add_facet = FALSE) addHighlights(p, x$ymax) }) # Generate gene track gene_p &lt;- generateGenePlot(txdb = txdb, chr = plot_params$chr, x_min = plot_params$x_min, x_max = plot_params$x_max, OrgDb = &quot;org.Hs.eg.db&quot;) gene_p_highlighted &lt;- addHighlights(gene_p, ymax=9) # Combine all plots using aplot combined_p &lt;- combine_hic_p %&gt;% insert_bottom(histone_plots$H3K27ac, height = .2) %&gt;% insert_bottom(histone_plots$H3K36me3, height = .2) %&gt;% insert_bottom(histone_plots$H3K4me1, height = .2) %&gt;% insert_bottom(histone_plots$H3K4me3, height = .2) %&gt;% insert_bottom(gene_p_highlighted, height = .5) combined_p 3.4.3 Visualization of different genomics data tracks # Generate HiC plots GM12878_hic_p &lt;- generateHicPlot(epigenetics_data[[&quot;GM12878_hic&quot;]], &quot;GM12878&quot;, show_legend = FALSE) K562_hic_p &lt;- generateHicPlot(epigenetics_data[[&quot;K562_hic&quot;]], &quot;K562&quot;, show_legend = FALSE) # Generate ChIP-seq coverage plots GM12878_cov_p &lt;- generateCoveragePlot(epigenetics_data[[&quot;GM12878_peak&quot;]], &quot;GM12878 ChIP-seq&quot;, 2000, add_facet = TRUE, show_legend = FALSE) GM12878_cov_p &lt;- addHighlights(GM12878_cov_p, ymax = 2000) K562_cov_p &lt;- generateCoveragePlot(epigenetics_data[[&quot;K562_peak&quot;]], &quot;K562 ChIP-seq&quot;, 2000, add_facet = TRUE, show_legend = FALSE) K562_cov_p &lt;- addHighlights(K562_cov_p, ymax = 2000) # Combine plots using aplot GM12878_p &lt;- (GM12878_hic_p + theme(legend.position = &#39;none&#39;)) %&gt;% insert_bottom(GM12878_cov_p) %&gt;% insert_bottom(gene_p_highlighted, height = .6) K562_p &lt;- (K562_hic_p + theme(legend.position = &#39;none&#39;)) %&gt;% insert_bottom(K562_cov_p) %&gt;% insert_bottom(gene_p_highlighted, height = .6) # Add legends and create final view split_p &lt;- plot_list( gglist = list(GM12878_p, K562_p, plot_grid(get_legend(generateHicPlot(epigenetics_data[[&quot;K562_hic&quot;]], &quot;K562&quot;)), get_legend(generateCoveragePlot(epigenetics_data[[&quot;K562_peak&quot;]], &quot;K562 ChIP-seq&quot;, 2000, add_facet = TRUE)), nrow = 1)), design = c(&quot;AAAAAABBBBBBCC&quot;) ) split_p "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
